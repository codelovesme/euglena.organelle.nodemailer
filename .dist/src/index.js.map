{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;;AACb,sDAAsD;AACtD,yCAAyC;AAKzC,eAAuB,SAAQ,OAAO,CAAC,KAAK,CAAC,SAAwC;IAGjF;QACI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IACS,WAAW,CAAC,SAAuH;QACzI,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,QAAgC,EAAE,QAAQ,EAAE,EAAE;YAClF,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;YAChC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QACH;;;;WAIG;IACP,CAAC;IACO,QAAQ;QAEZ;;;;WAIG;QAEH;;;aAGK;QACL,IAAI,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACjH,CAAC;;AA7BsB,cAAI,GAAG,gCAAgC,CAAA;AADlE,8BA+BC;AAED,IAAiB,SAAS,CAyBzB;AAzBD,WAAiB,SAAS;IACtB,IAAiB,QAAQ,CAiBxB;IAjBD,WAAiB,QAAQ;QAIrB,SAAiB,SAAQ,OAAO,CAAC,UAAsB;YAGnD;;;;eAIG;YAEH,YAAY,EAAS,EAAC,IAAe;gBACjC,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAC,EAAE,CAAC,EAAC,IAAI,CAAC,CAAC;YAChD,CAAC;;QAVsB,QAAI,GAAG,SAAS,CAAC,IAAI,GAAC,MAAM,CAAC;QAD3C,YAAG,MAYf,CAAA;IACL,CAAC,EAjBgB,QAAQ,GAAR,kBAAQ,KAAR,kBAAQ,QAiBxB;AAOL,CAAC,EAzBgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAyBzB","file":"index.js","sourcesContent":["\n\"use strict\";\nimport * as euglena_template from \"@euglena/template\";\nimport * as euglena from \"@euglena/core\";\nimport { sys, js } from \"cessnalib\";\n\nimport Particle = euglena.AnyParticle;\n\nexport class Organelle extends euglena.alive.Organelle<particles.incoming.SapContent> {\n    public static readonly NAME = \"CHANGE HERE WITH A UNIQUE NAME\"\n    private sapContent: particles.incoming.SapContent;\n    constructor() {\n        super(Organelle.NAME);\n    }\n    protected bindActions(addAction: (particleName: string, action: (particle: Particle, callback: (particle: Particle) => void) => void) => void): void {\n        addAction(particles.incoming.Sap.NAME, (particle: particles.incoming.Sap, callback) => {\n            this.sapContent = particle.data;\n            this.getAlive();\n        });\n        /**\n         * TODO:\n         * Add Actions below in this method \"bindActions\" \n         * \n         */\n    }\n    private getAlive() {\n\n        /**\n         * TODO:\n         * Write something to make state of the organelle that\n         * organelle can take requests, and work.\n         */\n\n        /**\n         * send a notification to the Cytoplasm\n         * to inform about the organelle has been ready to get requests\n         * */\n        this.send(new euglena_template.alive.particle.OrganelleHasComeToLife(this.name,this.sapContent.euglenaName));\n    }\n}\n\nexport namespace particles {\n    export namespace incoming {\n        export interface SapContent {\n            euglenaName:string\n        }\n        export class Sap extends euglena.ParticleV2<SapContent>{\n            public static readonly NAME = Organelle.NAME+\".sap\";\n            \n            /**\n             *  TODO:\n             * Add fields needed from outside\n             * before started the organelle working\n             */\n\n            constructor(of:string,data:SapContent){\n                super(new euglena.MetaV2(Sap.NAME,of),data);\n            }\n        }\n    }\n    export namespace outgoing{\n\n    }\n    export namespace shared {\n        \n    }\n}\n"]}